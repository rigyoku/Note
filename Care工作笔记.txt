$.Deferred()是jQuery的回调函数解决方案. 在jQuery1.5之后可以使用链式写法: $.ajax({}).done(function(){}).fail(function(){}). done可以有多个,按照顺序执行.
	多个操作同时执行使用when方法[$.when(a,b).done().fail()],注意when的参数是Deferred对象,不局限于ajax. 调用resolve改变状态会进入done方法,调用reject改变状态会进入fail方法.
	状态只能改变一次[dfd.promise()返回一个不能改变状态的对象],when中一个失败就进入fail,都成功才会done[执行fail/done完毕后进入always].
	then方法接收2个参数作为done和fail,只有一个参数时等价于done.
	使用$.Deferred(function)实例化dfd对象时传入一个方法作为参数,该方法的参数就是该实例dfd对象; dfd.promise(function)传入一个方法,该方法获取done和fail接口,dfd改变状态进入接口.
Radio.channel(key) 广播机制,根据key匹配频道,可以解耦合. on/trigger为一套,用于监听/触发事件, reply/request为一套,相当于带返回值的on/trigger.
操作对象前最好判断一下是否存在,放在操作空对象报错
Marionette框架: 基于Backbone.js,Underscore的前端框架. 提供特定的view.
	使用时先创建Application实例, 然后创建collection盛装model, 创建数据对应的view, 添加区域, 在区域上show该view即可.
	collectionView会遍历model显示,创建时可以指定childView和collection还有options参数[collection级别的变化,如add/remove/sort/reset会刷新view,model级别的变化不会刷新].
	设置renderOrSort参数为true时,更改排序就只会调整位置而不更新dom内容. tagName是内容的父标签, className是父标签的class, 设置样式可以通过attribute来写style.
	view通过serializeData方法将数据渲染到画面上[默认返回this.model.toJson]. 如果数据不同影响画面模板,可以重写getChildView方法对应不同数据显示不同画面.
	onAttach方法在dom加载好之后触发一次.
	$el.children为在当前元素下查找子元素.
Backbone: get方法直接取数据, escape方法在取数据之前会先把数据中HTML字符转出实体形式防止XSS攻击[" => &quot;]
	on('change')和on('change:attr')都可以监听属性变换,后者先触发. 使用unset('attr')删除属性.
	pervious方法接收属性名作为参数,返回该属性修改前的状态.perviousAttributes()方法返回变更之前的对象,包含所有属性.[change方法中有效,因为set修改会连同上一状态一起修改]
	validate方法对属性进行判断,验证失败会返回字符串被on('error')方法接收,通过验证返回undefined.在set时可以添加error回调参数,比整体验证先处理该方法.
	设置silence属性不会调用change/error方法,可以用pervious回滚数据.
	使用model自带方法通信需要服务端支持REST构架,create/read/update/delete分别对应RequestMethod为POST/GET/PUT/DELETE.id属性表示修改哪条数据,通过idAttribute可以自定义id属性.
	id应该由服务器创建并保存到DB,客户端创建的模型不会添加id属性,通过isNew()可以判断是否是客户端新建的模型.
	默认采用PATHINFO方式访问服务器接口,将id追加到url后面[动态路由]. 3种方式定义URL, urlRoot/url/save方法传入url参数, 优先级为倒序.
	save方法会判断isNew,新建模型采用POST,原有更新采用PUT, 而fetch方法只是取数据, destroy删除模型.[save方法可以设置wait参数来确认服务器的返回值,没有返回值或者返回失败会还原模型]
	实际API可能和前台的数据模型不匹配,使用parse方法进行转型赋值. 画面更新应该放在save的回调中,业务逻辑放在change的监听中.
	fetch会传id查询,destroy会从collection和服务器移除模型,但是模型本身数据不会移除,使用unset/clear移除,delete也可以用wait参数提供回滚功能.
	不支持REST的服务器使用backbone做通信,可以重写sync方法[也可以同步到本地DB]. 3个参数分别是method,model,options,代表要进行的操作,要同步的数据,适配规则.
	collection的comparator属性来定义排序规则, collection.pluck可以从集合拉取某个属性的集合, where方法根据属性进行匹配返回所有结果, findWhere返回第一个匹配结果.
	collectionView的filter可以过滤model,返回true的才显示. region.currentView指向该区域显示的view.
	Radio.channel.trigger去触发一个没注册的监听,不会报错.
	layoutview有region属性,compositeview有childRegion属性.
	compositeview的emptyView属性是集合为空是显示的view.
	destory之后的方法不会执行,相当于return.
eclipse保存卡顿可以把自动build关了. 复制卡顿可以把.project文件倒数2行的check删了.
由于this指向调用方法的对象,模块的方法内this指向不是原对象,可以先保存this再后续使用[例如self=this].
js闭包: 在全局调用局部变量[方法内一个方法调用了内部变量,最后返回了该方法.[注意let/const的块级作用域和var区别]],让局部变量不被垃圾回收机制回收掉.
	由于返回的函数不是立即执行,所以不要引用会改变的变量或者循环变量.
	因为js只有函数没有类的概念,不能创建类似java的私有属性,而闭包可以把方法内变量暴露出来类似私有属性.
尽量使用 === 而不是 == 来做相等判断[==会进行类型转换].
使用eval可以把字符串当做js语句执行, 但是不建议使用.
循环避免使用continue和break[continue可以更改判断逻辑,break可以更改跳出条件]. switch语句加break增加可读性.
声明函数: function do() {} 和 var do = function() {} 两种方式,第一种会被提前到代码头, 所以建议采用第二种方法[由于var特性,do会被在头部声明而没有实例化,采用const/let不会提前声明].
创建对象和数组时尽量采用{} 和 [],而不是new Object() 和new Array().
使用new创建对象时,this指向对象本身. 构造方法拥有原型prototype属性[不局限构造方法,所有方法都有],每个使用该构造方法实例化的对象共用一个原型. 
	当调用对象属性时,先在对象内部查找,没有再去原型查找. hasOwnProperty('pro')可以判断该属性是否是自身的. 可以用 'pro' in obj 判断是否包含某属性, 也可以 for(pro in obj) 遍历属性.
	一个构造方法F.prototype.constructor指向F本身. 原型链的顶部是Object,而Object没有__proto__属性所有到此为止. 需要共享放在原型,独立属性放在构造方法.
	可以手动修改构造方法的prototype,但是将原型修改之后其构造方法会变更需要重新指定. [注意:实例拥有属性,方法拥有原型]
js是先解析后执行,如果直接判断变量是否存在可能会报错,使用typeof判断undefined来判断. else中没执行的var也会被提前声明.
	函数名冲突会覆盖,变量名冲突会忽略.既有函数又有变量,会使用函数.
js以分号结尾,不加分号不报错是因为解释器自动补全了分号.
jQuery的filter可以对选择器结果进行过滤, eq可以获取选择器的第n个值, next取到选择器后第一个指定标签, closest取得选择器最近的指定父标签, siblings取得同级元素.
	jQuery的链式写法可以使用end()后退一步. 选择器取值只取第一个,赋值会修改所有.
	insertAfter/after 插入到后面/移动到后面 appendTo/append 内部插入. empty方法清空元素, $('<p>')创建一个新元素.
	可以为一个元素同时bind多个事件来让其执行一个回调, one监听只触发一次, unbind来解除监听.
	jQuery自带动画函数, slideUp/slideDown 卷曲. fadeOut/fadeIn/fadeTo 淡入/淡出/调整透明度. 参数除了动画时间,还可以传入回调.
	还可以自定义动画animate({opacity:0.5}, time, func). stop和delay可以停止/延缓动画, 设置$.fx.off为true可以关闭网页所有动画. $('.a').animate({height:400})使用动画改变高度.
	id/类型选择器速度最快,其次是类选择器,伪类选择器最慢. 原生js速度更快[多条件的选择器直接并列写即可,而'或'选择器用逗号分隔].
	链式写法默认缓存可以提高效率,防止选择器耗时.
	事件存在冒泡机制, 可以在父元素监听, 顶层使用$(document).on()
	修改dom开销很大,应该整齐插入而不是一条条插入. 大量处理时,应该使用detach[移除元素并保留副本,用于再插入]取出dom操作完再插入.
	多个事件都要被触发时,应该按顺序触发,即一个结束触发另一个,不要一起触发.
	$.extend(flag, target, obj...)将obj等一系列对象合并到target对象上; flag默认为false, 当设置为true时,同名属性如果是对象,该对象也会合并而不是覆盖.
	$.fn指的是jQuery命名空间,对$.fn扩展对每个jQuery都有效,等价于jQuery.prototype.
	dom的offset().top可以取得相对屏幕偏移量.
	定位到一个元素后,可以接着.find()查找其子元素. tr:first-child可以选中第一个tr.
	jQuery的spinner插件用于扩展输入框,提供上下箭头.
	text方法取值会将html字符转义,比如将&nbsp;转成空格.
	toggle(speed, callback, switch)切换元素可见状态,参数分别是切换速度,切换回调,显示/隐藏元素.
	通配符选择器: $('[xx$=ab]') 选择xx属性以ab结尾的选择器. $('[xx^=ab]') 选择xx属性以ab开头的选择器.
cookie设置httpOnly之后就不能被js读取了,有效防止XSS[恶意脚本]攻击. 设置secure将会只允许https通信. 使用JWT认证,将服务器加密后json放在请求头的Authorization放在XSRF[盗用登录信息]攻击.
setInterval来定时循环方法, clearInterval停止该循环.
声明后直接调用的立即执行函数,可以产生局部变量让外部无法访问,也可以保存某个参数当时的状态[防止闭包作用域无法保存多个状态的变量问题,因为绑定到参数的变量值不会变].
event.target/currentTarget区别在于: target是触发的元素, currentTarget是事件绑定的元素.
修改dom属性时,如果是固有属性,应该使用prop方法,自定义的属性,应该使用attr方法[checkbox的值是不一样的].
dom.data可以赋值和取值.
选择器修改样式时,注意范围,可能影响到不该变化的元素.
script标签加载js虽然方便,但是存在问题: 标签按照顺序加载,需要按依赖性引用; 同步加载js的话可能卡住页面; 动态生成引入js标签会导致dom.ready和window.onload对该文件无效,因为不在dom结构中.
LAB链加载js: 引用LAB.js,然后使用$LAB.script('xx').script('xx')来顺序引用脚本,中间可以加wait/wait(func)等上一步加载,不加就是同步加载.
RequireJS不控制加载顺序,全部加载完执行回调[require([xx,xx],funciton(){})].
	shim可以将某个模块的全局变量暴露给require,当做这个模块的引用. 需要暴露多个变量时,使用init: function(){return {a1:1,a2:2}}.普通require无法获得模块的全局变量.
	加载过来的全局变量赋给window,可以通过window.a1获取.
	虽然require插件可以避免页面阻塞,但是插件本身还是可能阻塞,可以放到html后引入或者设置async=true defer[兼容ie].
	引入后指定data-main作为js入口,require.config的baseUrl会加到paths之前解析路径.
	require提供一系列插件,text/image/json/mdown插件加载对应类型文件,domready让回调在页面加载完执行.
	waitSecond参数设置超时时间,设为0表示不会超时.urlArgs表示url后面的防止缓存参数,config属性使用Module.config取出,是application级别的配置信息.
由于js解释器自动补全分号,return [换行] {};时,会返回undefined而不是该对象.
调用函数时,括号和函数名不加空格; 声明函数时,函数名和参数没有空格; 其他情况左括号前均有空格.
不要使用with语句,不要使用自加[改用a+=1],句尾不要省略分号,不要贪图简略造成难以理解代码[if(a=b)].
变量应该放在函数头部声明. 构造函数首字母大写, 全局变量全部大写[少用全局变量].
创建js类: 构造方法; Object.create; 对象内部方法返回一个实例[极简主义法].
AMD规范: 异步模块定义,采用require([],func)来加载模块执行回调. CommonJS是同步加载[加载时就执行了模块,调用时取出缓存].
	使用define([],func)定义模块, 没有依赖时可省略第一个数组参数执行写方法.
严格模式: 消除js语法不合理/不严谨之处, 保证安全, 提高编译器效率, 为新版本js铺垫.
	对于整个脚本而言,将use strict放在第一行时整个脚本严格模式运行; 不放在第一行按普通模式运行[注意严格和非严格的代码合并].为了合并方便,整个代码块可以放在立即执行函数中.
	严格来讲,前面的代码没有运行结果比如一个分号,可以不把use strict放在第一行.
	一个画面有多段js代码,全部严格模式需要对每段代码都加上use strict. 对于单个方法而言, 方法第一行加use strict后整个方法严格模式运行.
	一个没声明的变量就赋值,在普通模式没问题[会声明成全局变量],但是严格模式报错. [严格模式对动态绑定做了限制来提高编译效率: 禁止with和创建eval作用域]
	严格模式不允许this指向全部变量[构造方法不加new报错],禁止内部遍历调用栈. 不能直接删除变量. 只有属性配置为configurable为true的才能删除.
	严格模式下列操作会报错: 修改只读属性[writable:false], getter方法赋值[对return对象赋值], 禁止扩展的对象添加属性[Object.preventExtensions(obj)禁止扩展], 删除不能删除的属性.
	方法的形参命名重复在正常模式不报错,通过arguments[i]可以访问,严格模式下直接报错. 对象的重名属性在IE的严格模式下报错,chrome不报错.
	严格模式的Chrome不允许数字0开头, IE允许. 严格模式不允许对arguments赋值,且不记录其变更[即修改了参数再去arguments[i]仍是原值,不可以调用arguments.caller]
	严格模式新增了保留字: implements/interface/let/package/private/protected/public/static/yield;
source maps: 记录代码压缩前后映射位置,chrome的f12开启enable JavaScript source maps,这样定位就不是压缩后位置.
设置最高版本IE渲染: <meta http-equiv="X-UA_Compatible" content="IE=edge"/>
Beyond compare可以ctri + i显示差分结果汇总.
有些模块在定义时指定了模块名,就不能在引用时指定别的名字,比如define('jQuery',[],()=>{})就被定义成了jQuery.
underscore: _.throttle在接到任务后计时15秒,到时间执行所有任务. _.debounce接到任务开始计时15秒,再接到任务会重新计时.
	_.throttle(func, time, {leading: false, trailing: false}) 参数是要执行的方法,延迟时间,忽略开始边界,忽略结尾边界.
	_.debounce(func, time, flag) 参数是要执行的方法,延迟时间,flag设true会在开始边界执行而不是结束边界.
	_.defer延迟执行方法[参数作为调用方法的参数],直到同步队列执行完毕再执行,相当于0ms的setTimeout.
	_.invoke根据method对参数数组的元素执行方法.
	_.find(list, function)用于遍历属性,查找出方法返回true的元素.
	_.each在遍历过程中改变数组不会影响遍历,而数组本身的forEach方法遍历时更改数组会影响遍历.
console.dir(obj)可以列出对象所有属性和方法.
创建httpUrlConnection时,是本地向URL创建一个流. 从URL向本地为输入, 从本地向URL为输出.
SQL插入单引号时需要把单引号换成2个单引号.
Tomcat读取config文件,编译后存放java/jsp文件到catalina路径下.
log4j可以用stdout重定向输出.
location.search取得URL查询部分,即问号之后的内容.
apply/call: 用于劫持对象的方法或者属性. 调用Func.apply(content, [args])来将content作为Func的this对象,[args][参数数组]作为Func调用的参数.
	call和apply类似, 但是参数是参数列表而不是参数数组形式. 由于apply是列表形式的参数,可以发挥某些优势,比如: max方法的参数是列表形式,使用apply可以传入数组参数,
	还有Array.prototype.push()也是支持列表形式不支持数组形式,使用apply可以完成数组合并.
input的size属性可以控制输入框大小,style的width优先度比size高.
更改IE的url可以在历史记录里添加一条内容来实现.
状态机写法: 为对象添加状态属性,监听该属性的变化.在异步操作结束后修改状态来触发监听.
JavaScript的异步机制: 同步任务在主线程执行,除了主线程还有一个任务队列. 在异步操作结束后在第二个队列存放一个任务,执行栈的同步任务全部执行完毕后第二队列入栈执行.
	执行栈中同步任务总是在异步回调前执行.
setTimeout: 接收2个参数,回调函数和等待时间[执行一次].setInterval参数相同,但是是反复执行. 注意这种方法是异步的,所以即使0ms延迟也会在同步任务之后才执行.
undefined表示应该有值但是没有,null表示一个空值.
js是弱类型语言[类型由变量实际值决定],虽然灵活简单,但是强类型语言可以降低系统复杂度,编译时就能发现错误. 3种强类型语言: TypeScript/FlowCheck/FlowCheck/F
	TypeScript是微软推出的JavaScript的超集,可以编译成js执行,后缀为.ts. 采用 变量:类型 来指定类型,调用时传入参数类型和声明类型不匹配会直接报错抛出类型不匹配.
	FlowCheck是轻量级断言库,可以在运行时检查变量类型,也是 变量:类型 来指定类型,转成js文件后会先加载断言库判断类型,不匹配报错.
	Flow是facebook发布的类型检查工具,用来检查React远吗,使用/*@flow*/注释来表明使用Flow检查变量类型,类型不符报错并提升预期类型.Flow使用注释声明类型.
JavaScript采用ucs-2编码方式,字符串函数无法返回正确结果[会将4个字节成拆成2个字节]. es6对字符处理做了优化: for(let a of str)可以正确识别.使用\u{xxxx}表示4字节.
数字扩展原型: Number.prototype.add定义一个add方法来做加法,调用可以使用5['add'](6) / 5..add(6) / (5).add(6) 来区分小数点和方法.
	由于可以为属性添加get方法,所以也可以这样扩展: Object.defineProperty(Number.prototype, 'double', function() {return this + this;}) 为数字添加double方法
React框架起源于Facebook, 2013/5开源. 使用render方法将模板转成HTML并插入执行dom,可以混写js和html,使用组件封装代码,this.props.children执行组件所有子节点.
	组件的propTypes属性来check属性值是否符合要求. 组件是存在内存的数据结构是虚拟dom,只有在插入文档时才会变成真实dom.
	将组件看做状态机,getInitialState取得初始状态,setState修改状态[触发render刷新画面,state可以修改而props不可修改].
	组件生命周期: mounting[插入dom],updating[重新渲染],unmounting[移除dom],插入和重新渲染还有will[插入前]和did[插入后].
	注意表单是用户互动组件,不能用this.props读取,需要在change做回调取得event.target读取.
尾调用: 函数最后一步调用其他函数[严格最后一步,不能return f()+1 和 return f;]. 由于函数调用会在内存保存调用记录来保存调用位置和变量,而尾调用只需要保留一条调用记录.
	比如递归函数会不断调用自身,如果是尾调用形式,只需要保留一次调用记录[调用之前的操作不需要记录],避免了堆栈溢出. 使用currying[科里化]做优化,把多参数改成单参数形式.
	es6的尾调用优化只在严格模式下开启,正常模式无效.因为正常模式函数内部的arguments和caller记录调用栈,严格模式禁用了这2个变量.
由于promise会导致代码冗余,可以用协程[类似线程,用yield暂停].Generator是es6对协程的实现,可以交出函数执行权.
	Generator在函数名前加*区别普通函数,调用该函数不会返回结果而是返回指针,调用指针的next方法执行yield暂停前的的语句.再调用next会执行暂停后语句.
	next方法返回对象{value: '', done: FLAG}, value是yield表达式的值,FLAG表示执行状态.next方法可以传入参数来继续执行暂停后语句.
	函数内部还可以使用catch捕获异常,使用throw抛出异常.
传名和传值: 传名调用是参数表达式传入方法体,执行时求值; 传值调用是表达式求值后作为参数传入方法体.
Thunk函数: 编译器的传名调用时替换参数的临时函数. 由于js是传值调用,Thunk不是替换表达式,而是把多参数函数替换成单参数函数[参数只是回调].用于自动执行Generator回调.
CSS三角形: 宽高设为0,为border赋值拼三角形. 一个边框作为底边,2个边框作为斜边,剩下一个边框隐藏.
Handerbar: 使用{{#unless @lass}}xx{{/unless}} 判断最后一行不输出xx,unless相当于不等.
	#with 将对象的属性向下层传递.
toFixed方法: 做四舍五入计算[其实是最后一位4舍6入,如果是5判断5的前一位,奇数进位偶数舍去].
fixed/absolute布局: 没有滚动条时没有差异; fixed不会跟着滚动条滚动, 而absolute跟着滚动条滚动[即fixed是相对于浏览器,absolute是相对于可视区域].
Array.reverse()翻转数组.
async就是讲Generator函数的*替换成async, yield替换成await, 整体像是同步写法,自动执行器和Generator函数放在一个函数内. await后面的promise可能reject,最后放在try/catch中.
	await命令只能在async函数中,普通函数直接报错.
co函数库原理就是讲自动执行器包装成一个库.
each和forEach是回调方式实现的循环,不能使用break跳出循环,可以使用return在进入操作前直接跳过.
css的opacity可以调节透明度,0是完全透明,1是不透明.
正则表达式判断从A到B中间包含任意字符: (?=A).[\s\S]*B . 使用.replace(/\D/g, '')可以替换所有非数字字符[\D等价于[^0-9],即非数字; /g是全局匹配].
e.g.: 文档中表示例如, for example的缩写.
子网掩码和IP进行and运算,可以得出所在网络是否在一个子网,不同子网需要网关转发才能通信.
去掉IE的INPUT框的X: ::-ms-clear{display: none}
负数的二进制表示正数补码: 高位补1
bind('paste',func)绑定粘贴事件.
propertychange可以解决IE9以下oninput不兼容问题.
创建元素: html形式'<p>test</p>'; jQuery形式$('<p></p>').text('test'); dom创建document.createElement('p')
event.stopPropagation()可以阻止事件冒泡.
css: -webkit-appearance:none可以移除原生样式
数组的splice(start, num, new)用于从start位置开始删除num个元素,并添加new作为新元素在该位置.
使用chart.js绘制多类型图形时,主类型不能是折线图. 通过hoverBackgroundColor设悬停背景色,hoverBorderColor设置悬停边框色.
SQL: trunc(1.2345, 2)结果是1.23 保留2位,不进行四舍五入.
Math.ceil()向上取整.
Date.setDate()设置日期,正数代表当月,0代表上月最后一天,负数代表上个月. 通过getDay取得当前是周几,然后getDate减去周几再setDate得到当周周一.
LZ压缩算法: 在一个区间[32kb]内搜寻重复字符,3个以上才压缩,把重复字符记录[采用2个关键字记录,距离上一个重复字符记录和多少字符重复],不重复不处理,结束后移动到重复字符的最后.
	在文件后面补上压缩字符和原字符映射表. 关键字也能压缩,频率高的少量字节表示,频率低的大量字节表示.
ssh命令可以链接server： ssh -p端口号 用户名@ip 然后输入密码即可.
数组的方法: map对每个元素执行参数方法;reduce会接收2个参数,上一次的运行结果和下一个元素继续运算.
	filter接收一个过滤函数,3个参分别是当前元素,当前元素索引,整体数组.
	sort会按照ascII码来排序,不符合大部分需求,需要传入自定义排序函数,返回-1/0/1.
ES6的箭头函数:单行函数可以省略大括号,单个参数可以省略小括号.如果单行函数返回对象可以小括号括起来.
	箭头函数的this不是指向调用者,而是由创建时上下文决定,所以call/apply无法修改this指向.
保存密码不要直接明文保存,但是加密也可能泄露,最好采用hash加密[hash加密是单向的,保存参数和运算结果比较安全]. 但是用户忘记密码时,我们也不能提供密码找回,只能重置密码.
	将重置密码的URL发给用户,该URL也要设置有效期. 用于重置密码提供的邮箱如果没有注册也不要做提示,这会让人知道邮箱被没被使用[要对该邮箱提示该IP在重置密码].
	发送重置邮件前可以通过密保问题验证是否是该账户拥有者.
将全局方法赋值给属性,两者不等价,因为this分别指向全局和对象.
Vue: 改变Vue.data的值,画面就会重新渲染. 自定义的组件就是一个标签,可以设置props接受参数. 选项属性和回调上使用箭头函数会导致this指向异常.
	声明周期包括: beforeCreate/created/beforeMount/mounted/beforeUpdate/updated/beforeDestory/destoryd
	{{CONTENT}}可以直接输出内容, v-html="CONTENT"会把内容当做HTML渲染, 不要随意渲染HTML[可能导致XSS攻击].
	{{}}内也可以写单个表达式[语句和if等流程控制无效]. 模板的表达式都放在沙河中,这能访问到全局变量的一个白名单[Date,Math等],无法访问用户自定义全局变量.
	v-bind简写成:, v-on简写成@. data是数据,computed是计算属性[属性内方法作为全局变量的get方法,里面的this指向data],可以替换watch监听.
	method是方法,在模板用{{Function()}}调用方法和计算属性效果类型,区别是计算属性基于缓存[值不变就不更新],而方法每次调用都更新.
	计算属性默认只有get没有set,有需要可以自定义,在为计算属性赋值时调用set. 只有在数据变化时需要执行异步操作或者开销较大时才使用watch监听[监听v-model的值].
	为组件添加class不会覆盖原有class. :style={}可以设置css样式,可以直接写data的属性. v-if对应v-else和v-else-if.
	由于需要尽可能高效的渲染元素,通常会复用而不是重新渲染元素,可以添加id属性放在复用出现问题.
	v-show根据条件控制display属性,dom本质还是加载了,而通过v-if是控制dom是否加载进文档.所以v-if的切换开销大,v-show初始开销大.
	在v-for循环中,可以访问父作用域的属性.遍历时除了item还可取得index[(item, index) in arr],除了in还可以of遍历.在遍历对象时采用(value, key, index)取值.
	遍历对象按照Obj.keys()遍历,但是不能保证和js遍历的结果一样. 更新渲染过的列表时采用就地复用的策略,性能较高,想重新渲染要给项目加key.
	属性的监视无法检测属性增加或者删除[可以Vue.set(obj, key, value),但是不能增加根属性].
	v-for可以写在template上来渲染多个模板. v-for和v-if写在同意标签,先执行循环,每次循环都判断.
	创建一个计算属性来对生成一个原数组排序后的数组来显示,不改变原数组.
	@事件可以直接写js代码,可以写methods方法,也可以调用methods属性的方法传递参数比如$event.
	支持修饰符比如@click.stop="Function"来阻止点击事件的冒泡,.prevent阻止画面重载,.passive立即触发事件,.once值触发一次多个修饰符可以串联[按照声明顺序执行].
	v-model在表单上创建双向的数据绑定,v-model='msg'之后,在msg变化后{msg}的值也会变更,且改变输入内容会导致data.msg变更.注意select在ios中匹配不到v-model会变成未选中,不会选择第一个.
		所以下拉第一项目可以设成disabled的提示项目放在用户选择.
		默认情况每次input都会触发数据同步,设置v-model.lazy修饰符可以变成change事件同步,.number修饰符限制数字类型[因为type='number'也是字符串],.trim修饰符自动去首尾空格.
		由于v-model默认采用value/input,不同标签可能存在异常,可以在组件中使用model属性来定义prop和event,自定义取值和自定义事件.
	通过v-bind:test可以把值绑定到属性上,不局限于字符串类型.
	通过Vue.component('name', {opt, val})来全局注册组件,组件是可复用的vue实例,区别只是组件没有el属性.组件复用时由于要相互独立,所以data不能是对象,需要是返回对象的方法.
		通过prop可以实现向组件传值,组件内部声明好之后在引用时:pro来绑定. 组件只能有一个根元素.
		父组件可以监听子组件事件,子组件使用$emit来触发到父组件[可以传参数,比如@click='$emit('NAME', a)',父组件用$event接收;父组件用方法接收那第一参数就是传入的值].
	自定义组件也可以用v-model,例如自定义的input,使用v-model相当于绑定了value和input事件,需要在input事件抛出value值.
	slot插槽: 组件的模板使用<slot></slot>标签,调用组件标签时,写在标签中的值会插入到插槽内.
		插槽内容可以是html,也可以是其他组件.如果组件没有slot元素,那么组件标签内的内容会被抛弃. 插槽内容可以和访问到和模板一样的属性,不能访问子组件特性.因为子模板内容在子作用域编译.
		插槽可以设置默认内容,不设置值时采用默认内容,设置了就显示设置内容.
		组件内设置多个插槽时需要指定名字变成具名插槽[name='xx'].赋值使用template标签v-solt:name指定哪个插槽[可以动态指定v-solt:[name]或者#[name]],或者直接将name作为标签也可以指定.
		作用域插槽: 让插槽访问子组件内容.本质是提供一个方法接收v-solt绑定的参数给插槽访问. 可以使用template+#name的具名插槽为多个插槽分别赋值来访问.
	component标签的:is属性可以设置加载哪个组件,实现动态组件功能.
	因为部分html的标签对内容有限制,比如table和ul等,在内部使用自定义组件会导致被解析到标签外部.可以使用is='组件'来声明组件.
		如果使用单文件组件.vue文件,或者template: 'xx'字符串形式,或者使用script标签设置type为text/x-template也没问题.
	定义组件名时,可以使用横线分割,也可以用驼峰式命名.但是非字符串模板只能使用横线式[html大小写不敏感,浏览器将大写转成小写,prop同理].
	使用component全局注册的组件任意实例均可使用,而局部注册的组件虽然能够减少下载量,但是只有当前组件可以使用,子组件不可用.
		使用components属性局部注册. 使用模块系统时,组件都放在components目录下. 如果大量使用基础局部组件,可以在入口处注册成全局的.
	prop可以在声明时指定数据类型[除了基础型也可以自定义]和是否必须,指定默认值和验证方式[实例化之前验证,实例属性不可用].使用v-bind传入时不写参数就会把对象所有属性都传入.
		数据绑定在prop是单向向下的,父组件更新会影响子组件.所以子组件不应改变prop的值,需要变更可以放在计算属性,需要初始值可以放在data.
		注意通过prop传递对象时也是传递指针,所以子组件变更时父组件也能感知.
	如果属性没通过prop显示声明,可以写在组件的根实例上,会生成到根元素上.
	大多数特性会被外部设置的值替换掉,class和style特殊会进行合并. 如果不希望继承特性,可以设置inheritAttrs: false 禁用继承不会影响class和style.
		$attrs包含了父作用域不作为prop的特性,不包括class和style.通过v-bind="$attrs"传到子组件.
		通过禁用继承和$attrs传递可以控制特性的分发.
	事件名不同于组件和prop,不存在大小写转换.但是事件在dom模板监听还是会转成小写,最好用横线形式,保证事件名完全匹配.
	使用v-on:Name.native可以监听原生事件,也可以v-on="$listeners"来设置监听. $listeners是该组件所有的监听.
	有时需要父子组件双向传值,使用子组件$emit之后父组件使用.sync修饰符的属性来接收该属性的update事件并改变属性,本质是语法糖. .sync修饰的v-bind不能接表达式.
	keep-alive解决了动态组件切换时渲染性能问题,第一次被创建好之后被缓存下来. 将动态组件用keep-alive标签包裹即可,但是要求组件有自己的名字.
	使用工厂函数定义异步组件,resolve返回组件定义,也可以reject拒绝.
	不要手动操作dom或者另一个组件实例的内部.
敏捷开发=迭代开发+增量开发.不断重复的进行规划/设计/编码/测试/评估,每个版本都会增加用户可以感知的完整功能.
配色法则: 主题使用深色[c,f,6,9],浅色使用[a,b,c,d,e,f]
	文字不要用全黑,可以使用深蓝色[1a2a3a-7a8a9a]
	背景/阴影/边框建议灰色[aaa,bbb,ccc,ddd]
Grid: 网格布局对比Flex[弹性布局: 只能针对轴线位置的一维布局],网格布局可以指定项目所在单元格,可以视作二维布局.
	布局区域称为容器,子元素称为项目[项目是容器的顶层子元素,不包含项目的下层子元素].横行竖列排列.行列的交叉产生了单元格,网格线划分网格.
	容器的属性[定义在容器上]:
		display:grid 声明采用网格布局.默认情况下元素都是块状元素,可以改成行内元素[display:inline-grid].
			设置成网格布局后,容器的float/inline-block/table-cell/vertical-aline/column-*都将会失效.
		grid-template-colums:100px 100px 100px; grid-template-rows:100px 100px 100px;指定了一个3x3的网格[除了具体的像素,还可以采用百分比指定].
			每列都指定很麻烦,可以使用repeat来重复: grid-template-columns:repeat(3, 33.3%)指定了3列,每列都是1/3的宽度[repeat(2, 10px 20px)来重复出4列].
			在单元格大小固定而容器大小不固定时,可以auto-fill自动填充[grid-template-columns:repeat(auto-fill, 100px)来尽可能多填充100像素的子元素].
			除了百分比和固定像素,还可以使用比例[fr[fraction缩写]]来定义大小: grid-template-columns:1fr 2fr 100px 表示最后一列固定100像素,前两列按1:2分配.
			minmax函数可以控制一行/列的值的范围 minmax(1fr, 100px)最小比例为1,最大为100像素.
			定义网格线除了可以指定大小,还可以通过中括号指定名称[一条线可以有多个名称]. grid-template-columns: [line1] 10px [line2 LINE2] 20px
		row/column-gap: 行/列间距. 直接gap设定行和列间距.
		grid-template-areas指定区域. 区域有一个或多个单元格. 使用点表示没被使用的单元格. 同名表示着要结合成区域的单元格.
			结合的区域会影响边线绘制.区域-start/ 区域-end为边线名.
		grid-auto-flow: 指定排列规则,默认值row按照行排列,排满进入下一行,可以指定column排列. dense参数表示紧凑排列,尽可能排满.
		justify-items: 单元格内元素水平位置. start单元格开始边缘/end结束边缘/center居中/stretch拉伸铺满. align-items表示垂直位置,和水平一样. 合并简写为place-items.
		justify-content/align-content: 单元格在容器内水平/垂直位置. start/end/center/stretch和内元素一样. place-content合体的缩写.
			额外的参数 space-around每个项目两侧间距相等包括容器间距/space-between项目间距相等,和容器无间距/space-evenly间距由项目和容器平分/
		grid-auto-columns/rows:项目指定到了网格之外时,浏览器会自动生成多余网格放项目,该属性设置多余网格的宽高.用法和grid-template-rows/columns相同.
		grid-template是grid-template-columns,grid-template-rows,grid-template-areas的缩写,grid是grid-template和grid-auto-rows,grid-auto-columns,grid-auto-flow缩写[最好别缩写].
	项目属性[定义在项目上]:
		grid-column/row-start/end: 指定开始/结束项目和的行/列分割线. 可以用数字[数字意味着第几根边线,从1开始]或者分割线名称指定.
			span接数字表示跨越了几根边线,加在start和end上效果一致.
		grid-column/row: 表示grid-column/row-start/end的缩写. 用分数形式表示,如1/3表示1列开始3列结束. 省略值表示使用相同值.
		grid-area: 指定项目放在哪个区域[grid-template-areas划分的区域]. 还可以当做grid-column/row的缩写,用 1/3/2/4形式表示为位置.
异步操作时,画面要加等待效果防止连续操作.
监听事件不需要时记得销毁
d3.js: Data-Driver Documents 数据驱动文档,做可视化的js库  .
IE下的box-shadow单独使用不好用,需要配合border-collapse: separate设置边框为默认才行.
开发流程: 项目启动/需求分析/设计/开发/测试/上线. 启动: 人员分配,明确制度; 需求分析: 产品经理提供产品的原型,包含业务流程和页面跳转;
	设计: ui设计,概要设计,表机构设计,通讯规则; 开发: 编写代码,确认需求,多客户端联调,功能评审; 测试: 测试Case,压力测试,操作文档.
观察者模式: 多个观察者监听同一个主题,主题改变时所有观察者都会收到通知.publish触发事件, subscribe监听事件.
referer: 客户端发送请求时的可选字段,内容是引荐网页的url[正确写法是referrer,但是写入标准时写错了].
	点击link/发送表单/网页加载静态资源[js/css/image] 会把当前url传入referer. 可以通过document.referrer取得当前的referer来限制请求源.
	通过重定向而不是直接跳转可以隐藏referer. 设置rel='noreferrer'之后点击标签不会携带refer信息. 设置refer内容可以通过referrerpolicy控制.
img标签的srcset: 指定多张图片,使用 urlA 8w, url2 1x格式, 用来使用像素密度[x]或者宽度[w]区分图片显示. sizes属性必须配合srcset才有效.
	sizes属性可以设置媒表达式 (max-width: 100px) 80px 表示宽度小于100时该标签宽度80.
	picture标签是容器标签,内部包含source标签和默认的img标签,不支持picture就采用img.其中source标签配置srcset和media[max-width格式].
nginx的配置中,使用location进行匹配url,类似路由机制,多条匹配时会进入第一条.使用root时会将路径拼到匹配项目之前,alias会对匹配项目进行替换.
web中创建FileReader实例之后注册onLoad回调,调用readAsText可以读取文件.
Flex: 弹性布局, 设置Flex后,子元素float/clear/veritcal-align会失效. 设置flex布局的元素称为容器,子元素称为项目.容器存在2根轴: 水平主轴和垂直交叉轴. 
	主轴和起点交叉叫做main start,和终点交叉叫做main end. 交叉轴和起点交叉叫做cross start,和终点交叉叫做cross end.项目默认沿主轴排列,项目占轴线空间叫做main size/cross size.
	容器属性: flex-direction[主轴方向]/flex-wrap[换行方式]/flex-flow[方向和换行的缩写]/
		justify-content[项目在主轴上对齐方式]/align-items[项目在交叉轴对齐方式]/align-content[多轴线时,轴线间排列对齐方式]
	项目属性: order[排序索引,小的在前]/flex-grow[放大比例]/flex-shrink[缩小比例]/flex-basis[计算剩余空间做缩放前,该项目固定大小]/
		flex[前3者缩写]/align-self[该项目排列,可覆盖align-item]. [注意: 放大缩小如果设置0表示不缩放,正数代表缩放比例,负数无效.]
socket中on的监听对应emit的触发.
默认position布局是static,浏览器决定位置. relative相对布局,相对于static进行便宜.absolute绝对布局,相对于父节点偏移.fixed是相对于可视窗口偏移.
	2017年浏览器新增sticky动态固定效果,只能写在th上,tr/thead都没该属性,使用时配合top属性定位位置.
手机App分为3大类: 原生/web/混合. H5是混合的前端部分,混合app通过API Bridge调用容器底层接口.
铺满高度首先html和body要铺满.
MongoDB: 创建用户时,先use admin使用管理员数据库,然后db.createUser({user: 'root', pwd: 'pass', roles: ['root']})添加用户并赋予权限[userAdminAnyDatebase[管理用户]/read/readWrite/root].
	use dbName切换使用的数据库[不存在就创建]. mongod -dbpath PATH切换数据存放路径[只能在根目录下data文件夹]. db查看当前数据库名. show dbs显示所有数据库.
	db.createCollection创建集合[集合和表的概念类似]. db.NAME.insert(OBJ)向集合插入数据. show collections/tables显示集合.
	启动服务时,使用mongod -auth来开启验证,如果是默认启动的服务,可以修改bin下面的mongod.cfg文件,在security下添加authorization: enabled开启认证.
	db.shutdownServer()可以停止服务. db.dropDatabase()删除数据库. db.col.drop()删除表. db.changeUserPassword(USER, PASS)修改用户密码.
	控制台通过mongo IP连接指定地址.
非管理员用户添加启动服务: 先在注册表找到当前用户id, 控制台使用sc sdshow取得当前全县,再使用sc sdset在之前结果后添加查询到的用户id.
js的方法本质也是对象[非基本型都是对象],可以使用FUNC.NAME形式扩展. 对象就是属性的集合. 对象都是方法创建的[直接{}是语法糖].
	方法的原型也是对象.原型有默认方法construct构造方法,指向了本身. 使用方法创建的对象都可以调用构造方法的原型,实例隐式原型__proto__等于构造方法的原型,即所有对象都有隐式原型.
	方法的原型也是对象,所以该原型的隐式原型是Object,而Object的隐式原型是null.
	使用instanceof判断是不是同一类型,就是使用了实例的隐式原型和类型的原型向上查找,重合就返回true.
	访问对象属性时,先查找本身属性,没有再去查找原型属性.通过hasOwnProperty可以判断属性是否是自身的.
函数创建时决定了变量的取值作用域.函数和this会提前声明并赋值. 函数中的this只有在被调用时才能确定. 构造函数的this指向要new的对象. 作为属性被调用时,指向调用者.
	浏览器中全局环境的this指向window. 上下文环境只能有一个,环境栈默认是全局环境. 指向函数时将函数上下文入栈,执行完毕退栈,栈中就又只剩下全局环境了.
Java使用poi可以读取Excel. 通过HSSFWorkbook/XSSFWorkbook获取文档,再获取sheet/row/cell数据即可. row.getFirstCellNum是从0开始,row.getLastCellNum取得最后一列是null对象.
	getRowIndex/getRowNum也都是从0开始. 合并单元格后数据归属于第一行单元格.
PDF文件的CIDsystemInfo声明了映射集.
与运算符优先度高于或运算符,即先执行&&,再执行||.
配置对象的属性时, set/get和value不可并存. 如果是不可写/不可配置的属性,针对该属性的赋值/删除/重新配置操作均会报错.
	如果可写但是不可配置,赋值和重新定义没问题,但是不能从value修改到set/get形式.
shift + tab 可以前移.
Redis: 启动服务: 进入解压文件夹后, 命令行执行 redis-server.exe redis.windows.conf 注意该窗口不能关闭.
	连接服务: redis-cli.exe -h 127.0.0.1 -p 6379
	配置: dir存放路径 masterauth master设置密码的连接密码 requirepass连接密码 slaveof从属服务,启动redis从master更新数据 dbfilename数据库文件名[默认dump.rdb]\
	数据类型:string[单个键值对]/ hash[对象,键值对集合]/ list[数组]/ set[集合,唯一性]/ zset[有序集合,从小到大]
	操作: string操作: set key vaule赋值. get key取值. 在赋值时,相同的key会后者覆盖前者[key类型需要一样]. del key删除. hash操作: hmset/hget来赋值和取值.
		list操作: lpush/lrange来赋值和取值. set操作: sadd/smenbers来赋值和取值. zset操作: zadd/zrangebyscore取值[zset虽然值不能重复,但是排序的score可以重复].
vscode的插件安装到c盘用户下的.vscode文件夹.
keyup事件需要键盘抬起触发,而直接tab或者不松开键盘就通过鼠标移走焦点不会触发该事件.而且disabled元素也会触发keyup事件.
document.execCommand()可以操作剪贴板,执行copy/paste/cut方法.先选中dom[select]后,再执行命令即可修改剪贴板内容.同步操作容易卡顿,由于安全性问题被禁止.
ClipBoardAPI异步操作剪贴板: navigator.clipboard返回剪贴板对象.如果返回的undefined说明浏览器不支持该API.权限分为读和写,其中写权限默认拥有,而读取需要用户赋予.
	脚本读取的总是当前页的剪贴板,如果把相关代码在控制台执行可能报错,因为当前页是开发者工具而不是网页页面[可以设置延迟,执行了代码后点击网页来解决].
	由于读取需要权限,使用try...catch处理比较好[用户不赋予权限进入catch]. readText方法返回剪贴板数据的promise对象,resolve后得到其中文本的复制.
		read方法返回promise对象,在resolve后得到一个items数组,每个item拥有types和getType方法.types返回剪贴板支持的格式的数组,getType用于读取数据,返回promise对象,参数是读取的数据类型.
	write虽然不需要权限,也是放在try中处理比较好. writeText向剪贴板写入文本,write写入任意类型.写入的为ClipBoardItem对象,该构造方法接受type:value形式对象作为参数[可以同时多类型].
	向剪贴板放入数据触发copy事件. event.clipboardData属性包含了剪贴板的数据,可以setData/getData/clearData操作值,items(TYPE)传入类型取值.cut和copy方法一致.
	粘贴触发paste事件,直接通过navigator.clipboard处理. 修改剪贴板应该接入HTTPS保证安全.
HTML设置draggable为true则可以拖动. 拖拽的声明周期: drag[拖拽中持续触发]/dragstart[开始拖]/dragend[松开鼠标]/dragover[拖到当前节点上]/dragenter[拖进当前节点触发一次]/
	dragleave[离开当前节点]/drop[在当前节点释放]
Bulma: 为HTML添加class[is-xx/has-xx]实现样式的CSS库. 网格体系基于Flex布局,使用columns指定容器,column指定项目.可以指定设备类型完成适配.比如默认值mobile时,大于768px平铺,小于则垂直.
	使用is-NUM为12网格体系. is-offset-NUM表示偏移. is-half-mobile指占手机的一半,is-one-third-tablet占平板1/3. 宽度/布局/非表示/字体都可以根据设备类型控制.
	Bulma采用Sass语法,可以自定义修改样式: 下载源码,安装依赖,创建app.sass文件,引入Bulma基础变量之后进行修改[基于基础变量的衍生变量也可以修改].在该文件加载入口,之后写自己样式.
		最后修改package的build-sass命令吧bulma.sass改成app.sass,运行build脚本就会生成bulma.css.
Buefy: 基于Bulma框架设计的响应性UI组件的轻量级Vue组件库[Vue+Bulma].
VueJsonPretty: json美化工具. 引入组件后设置属性[data为显示json, 注意不是json字符串],还可以添加点击事件,定义显示深度,是否显示隐藏内容长度[path属性为根目录命名,而不是用来筛选的].
H5标签: section区段标签,定义文档中的节[章节/页眉/页脚]. aside侧栏标签,用于文章侧栏.
ClientOnly组件内放置一些对SSR不友好组件,只在客户端使用.
Vuex: 可以把state分割成不同的模块,创建store实例时通过modules传入,默认是全局命名空间.模块设置namespaced之后就会使用模块名作为命名空间,子模块继承父模块空间,也可以继续命名做嵌套.
	模块内部的dispatch和commit会触发当前模块的action和mutation,可以传入第三个参数{root: true}来触发根节点事件.
	mapState,mapActions等map函数可以接受第一个参数作为命名空间,第二个参数是state/action名.
	通过createNameSpacedHelpers传入命名空间创建基于命名空间的mapState等map函数.
	创建完store实例可以调用registerModule来注册模块,指定模块名或者命名空间和模块名.创建store时声明模块不能通过unregisterModule卸载.
	store实例创建时启动严格模式的话,非mutations引起state变化会抛出异常.生产环境不要开启严格模式来节约性能.
	由于状态只能mutation改变,直接使用v-model不可以.可以自己写赋值和改变方法,或者使用v-model时对属性添加set/get来保证值的来源和只能通过mutation变更.
	对于get和mutation测试可以直接调用,而action测试需要对api做mock来测试.
	热重载需要调用store.hotUpdate().
异或运算: XOR[exclusive or缩写],更纯粹的或运算.只有在一个true另一个false在返回true.使用^表示. 异或运算存在交换律和结合律[类似数学加法].
	连续的异或运算可以实现两个值的交换. 因为同值异或返回false,和false异或返回本身,所以可以用于加密运算. 同样该逻辑也可以用于2个文件备份,生成一个备份文件,缺失任意一份可以由剩余2份算出.
	通过异或可以找出数组中缺失的数字.
















		
		
		